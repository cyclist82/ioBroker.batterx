{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { BatterXService, BatterXState, getStatesMap } from './lib/batterx.service';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass Batterx extends utils.Adapter {\n\tprivate fetchInterval: NodeJS.Timer | undefined;\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'batterx',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\tconsole.log('ON READY');\n\t\t// Initialize your adapter here\n\t\tconst { name, batterxHost } = this.config;\n\t\tif (!name || !batterxHost) {\n\t\t\treturn;\n\t\t}\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState('info.connection', false, true);\n\n\t\tconst batterXService = new BatterXService(batterxHost);\n\t\tconst current = await batterXService.getCurrent();\n\t\tawait this.ensureStatesExist(name, current);\n\n\t\tthis.fetchInterval = setInterval(() => this.updateCurrentStates(name, batterXService), 10000);\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\t\t\tif (this.fetchInterval) {\n\t\t\t\tclearInterval(this.fetchInterval);\n\t\t\t}\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === 'object' && obj.message) {\n\t// \t\tif (obj.command === 'send') {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info('send command');\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate async ensureStatesExist(instanceName: string, current: BatterXState): Promise<void> {\n\t\tawait this.setObjectNotExistsAsync(instanceName, {\n\t\t\ttype: 'folder',\n\t\t\tcommon: { name: 'name of the batterX device' },\n\t\t\tnative: {},\n\t\t});\n\t\tObject.entries(getStatesMap()).forEach(async ([collection, configs]) => {\n\t\t\tconfigs.forEach(async ({ id, name, unit, type, entity }) => {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst val = current?.[type]?.[entity];\n\t\t\t\tif (val !== undefined) {\n\t\t\t\t\tconst path = `${instanceName}.${collection}.${id}`;\n\t\t\t\t\tawait this.setObjectNotExistsAsync(path, {\n\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\trole: 'indicator',\n\t\t\t\t\t\t\tread: true,\n\t\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\t\tunit,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnative: {},\n\t\t\t\t\t});\n\t\t\t\t\tawait this.setState(path, { val, ack: true });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate async updateCurrentStates(instanceName: string, batterXService: BatterXService): Promise<void> {\n\t\tconst current = await batterXService.getCurrent();\n\t\tObject.entries(getStatesMap()).forEach(([collection, configs]) => {\n\t\t\tconfigs.forEach((config) => {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst value = current?.[config.type]?.[config.entity];\n\t\t\t\tif (value) {\n\t\t\t\t\t// all voltages are send with 2 digits attached\n\t\t\t\t\tconst val = config.unit === 'V' ? value / 100 : value;\n\t\t\t\t\tthis.setState(`${instanceName}.${collection}.${config.id}`, { val, ack: true });\n\t\t\t\t} else {\n\t\t\t\t\tthis.log.debug(`No value for ${config.name}`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Batterx(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Batterx())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,qBAA2D;AAK3D,MAAM,gBAAgB,MAAM,QAAQ;AAAA,EAC3B;AAAA,EACD,YAAY,UAAyC,CAAC,GAAG;AAC/D,UAAM;AAAA,MACL,GAAG;AAAA,MACH,MAAM;AAAA,IACP,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC3C;AAAA,EAKA,MAAc,UAAyB;AACtC,YAAQ,IAAI,UAAU;AAEtB,UAAM,EAAE,MAAM,YAAY,IAAI,KAAK;AACnC,QAAI,CAAC,QAAQ,CAAC,aAAa;AAC1B;AAAA,IACD;AAEA,SAAK,SAAS,mBAAmB,OAAO,IAAI;AAE5C,UAAM,iBAAiB,IAAI,8BAAe,WAAW;AACrD,UAAM,UAAU,MAAM,eAAe,WAAW;AAChD,UAAM,KAAK,kBAAkB,MAAM,OAAO;AAE1C,SAAK,gBAAgB,YAAY,MAAM,KAAK,oBAAoB,MAAM,cAAc,GAAG,GAAK;AAAA,EAC7F;AAAA,EAKQ,SAAS,UAA4B;AAC5C,QAAI;AAMH,UAAI,KAAK,eAAe;AACvB,sBAAc,KAAK,aAAa;AAAA,MACjC;AACA,eAAS;AAAA,IACV,SAAS,GAAP;AACD,eAAS;AAAA,IACV;AAAA,EACD;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AACjF,QAAI,OAAO;AAEV,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IACvE,OAAO;AAEN,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACpC;AAAA,EACD;AAAA,EAmBA,MAAc,kBAAkB,cAAsB,SAAsC;AAC3F,UAAM,KAAK,wBAAwB,cAAc;AAAA,MAChD,MAAM;AAAA,MACN,QAAQ,EAAE,MAAM,6BAA6B;AAAA,MAC7C,QAAQ,CAAC;AAAA,IACV,CAAC;AACD,WAAO,YAAQ,6BAAa,CAAC,EAAE,QAAQ,OAAO,CAAC,YAAY,OAAO,MAAM;AACvE,cAAQ,QAAQ,OAAO,EAAE,IAAI,MAAM,MAAM,MAAM,OAAO,MAAM;AArH/D;AAwHI,cAAM,OAAM,wCAAU,UAAV,mBAAkB;AAC9B,YAAI,QAAQ,QAAW;AACtB,gBAAM,OAAO,GAAG,gBAAgB,cAAc;AAC9C,gBAAM,KAAK,wBAAwB,MAAM;AAAA,YACxC,MAAM;AAAA,YACN,QAAQ;AAAA,cACP;AAAA,cACA,MAAM;AAAA,cACN,MAAM;AAAA,cACN,MAAM;AAAA,cACN,OAAO;AAAA,cACP;AAAA,YACD;AAAA,YACA,QAAQ,CAAC;AAAA,UACV,CAAC;AACD,gBAAM,KAAK,SAAS,MAAM,EAAE,KAAK,KAAK,KAAK,CAAC;AAAA,QAC7C;AAAA,MACD,CAAC;AAAA,IACF,CAAC;AAAA,EACF;AAAA,EAEA,MAAc,oBAAoB,cAAsB,gBAA+C;AACtG,UAAM,UAAU,MAAM,eAAe,WAAW;AAChD,WAAO,YAAQ,6BAAa,CAAC,EAAE,QAAQ,CAAC,CAAC,YAAY,OAAO,MAAM;AACjE,cAAQ,QAAQ,CAAC,WAAW;AAhJ/B;AAmJI,cAAM,SAAQ,wCAAU,OAAO,UAAjB,mBAAyB,OAAO;AAC9C,YAAI,OAAO;AAEV,gBAAM,MAAM,OAAO,SAAS,MAAM,QAAQ,MAAM;AAChD,eAAK,SAAS,GAAG,gBAAgB,cAAc,OAAO,MAAM,EAAE,KAAK,KAAK,KAAK,CAAC;AAAA,QAC/E,OAAO;AACN,eAAK,IAAI,MAAM,gBAAgB,OAAO,MAAM;AAAA,QAC7C;AAAA,MACD,CAAC;AAAA,IACF,CAAC;AAAA,EACF;AACD;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE5B,SAAO,UAAU,CAAC,YAAuD,IAAI,QAAQ,OAAO;AAC7F,OAAO;AAEN,GAAC,MAAM,IAAI,QAAQ,GAAG;AACvB;",
  "names": []
}
